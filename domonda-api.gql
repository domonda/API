"""SWIFT Business Identifier Code"""
scalar BankBic

"""International Bank Account Number"""
scalar BankIban

"""
A signed eight-byte integer. The upper big integer values are greater then the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""ISO 4217 Currency Code"""
scalar CurrencyCode

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""The day, does not include a time."""
scalar Date

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

type DeliveryNote {
  documentId: UUID
  type: DocumentType
  categoryId: UUID
  workflowStepId: UUID
  importDate: Datetime
  periodDate: Datetime
  name: String
  title: String
  language: LanguageCode
  version: Datetime
  numPages: Int
  numAttachPages: Int
  partnerCompanyId: UUID
  invoiceId: UUID
  invoiceNumber: String
  deliveryNoteNr: String
  deliveryDate: Datetime

  """Reads and enables pagination through a set of `DeliveryNoteItem`."""
  noteItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): DeliveryNoteItemsConnection!
}

"""
A condition to be used against `DeliveryNote` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input DeliveryNoteCondition {
  """Checks for equality with the object’s `documentId` field."""
  documentId: UUID

  """Checks for equality with the object’s `type` field."""
  type: DocumentType

  """Checks for equality with the object’s `categoryId` field."""
  categoryId: UUID

  """Checks for equality with the object’s `workflowStepId` field."""
  workflowStepId: UUID

  """Checks for equality with the object’s `importDate` field."""
  importDate: Datetime

  """Checks for equality with the object’s `periodDate` field."""
  periodDate: Datetime

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `language` field."""
  language: LanguageCode

  """Checks for equality with the object’s `version` field."""
  version: Datetime

  """Checks for equality with the object’s `numPages` field."""
  numPages: Int

  """Checks for equality with the object’s `numAttachPages` field."""
  numAttachPages: Int

  """Checks for equality with the object’s `partnerCompanyId` field."""
  partnerCompanyId: UUID

  """Checks for equality with the object’s `invoiceId` field."""
  invoiceId: UUID

  """Checks for equality with the object’s `invoiceNumber` field."""
  invoiceNumber: String

  """Checks for equality with the object’s `deliveryNoteNr` field."""
  deliveryNoteNr: String

  """Checks for equality with the object’s `deliveryDate` field."""
  deliveryDate: Datetime
}

type DeliveryNoteItem {
  documentId: UUID
  deliveryNoteNr: String
  deliveryDate: Datetime
  posNr: String
  quantity: BigInt
  productNr: String
  eanNr: String
  gtinNr: String
  description: String
}

"""
A condition to be used against `DeliveryNoteItem` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input DeliveryNoteItemCondition {
  """Checks for equality with the object’s `documentId` field."""
  documentId: UUID

  """Checks for equality with the object’s `deliveryNoteNr` field."""
  deliveryNoteNr: String

  """Checks for equality with the object’s `deliveryDate` field."""
  deliveryDate: Datetime

  """Checks for equality with the object’s `posNr` field."""
  posNr: String

  """Checks for equality with the object’s `quantity` field."""
  quantity: BigInt

  """Checks for equality with the object’s `productNr` field."""
  productNr: String

  """Checks for equality with the object’s `eanNr` field."""
  eanNr: String

  """Checks for equality with the object’s `gtinNr` field."""
  gtinNr: String

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""A connection to a list of `DeliveryNoteItem` values."""
type DeliveryNoteItemsConnection {
  """A list of `DeliveryNoteItem` objects."""
  nodes: [DeliveryNoteItem]!

  """
  A list of edges which contains the `DeliveryNoteItem` and cursor to aid in pagination.
  """
  edges: [DeliveryNoteItemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `DeliveryNoteItem` you could get from the connection.
  """
  totalCount: Int
}

"""A `DeliveryNoteItem` edge in the connection."""
type DeliveryNoteItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DeliveryNoteItem` at the end of the edge."""
  node: DeliveryNoteItem
}

"""Methods to use when ordering `DeliveryNoteItem`."""
enum DeliveryNoteItemsOrderBy {
  NATURAL
  DOCUMENT_ID_ASC
  DOCUMENT_ID_DESC
  DELIVERY_NOTE_NR_ASC
  DELIVERY_NOTE_NR_DESC
  DELIVERY_DATE_ASC
  DELIVERY_DATE_DESC
  POS_NR_ASC
  POS_NR_DESC
  QUANTITY_ASC
  QUANTITY_DESC
  PRODUCT_NR_ASC
  PRODUCT_NR_DESC
  EAN_NR_ASC
  EAN_NR_DESC
  GTIN_NR_ASC
  GTIN_NR_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
}

"""A connection to a list of `DeliveryNote` values."""
type DeliveryNotesConnection {
  """A list of `DeliveryNote` objects."""
  nodes: [DeliveryNote]!

  """
  A list of edges which contains the `DeliveryNote` and cursor to aid in pagination.
  """
  edges: [DeliveryNotesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `DeliveryNote` you could get from the connection."""
  totalCount: Int
}

"""A `DeliveryNote` edge in the connection."""
type DeliveryNotesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DeliveryNote` at the end of the edge."""
  node: DeliveryNote
}

"""Methods to use when ordering `DeliveryNote`."""
enum DeliveryNotesOrderBy {
  NATURAL
  DOCUMENT_ID_ASC
  DOCUMENT_ID_DESC
  TYPE_ASC
  TYPE_DESC
  CATEGORY_ID_ASC
  CATEGORY_ID_DESC
  WORKFLOW_STEP_ID_ASC
  WORKFLOW_STEP_ID_DESC
  IMPORT_DATE_ASC
  IMPORT_DATE_DESC
  PERIOD_DATE_ASC
  PERIOD_DATE_DESC
  NAME_ASC
  NAME_DESC
  TITLE_ASC
  TITLE_DESC
  LANGUAGE_ASC
  LANGUAGE_DESC
  VERSION_ASC
  VERSION_DESC
  NUM_PAGES_ASC
  NUM_PAGES_DESC
  NUM_ATTACH_PAGES_ASC
  NUM_ATTACH_PAGES_DESC
  PARTNER_COMPANY_ID_ASC
  PARTNER_COMPANY_ID_DESC
  INVOICE_ID_ASC
  INVOICE_ID_DESC
  INVOICE_NUMBER_ASC
  INVOICE_NUMBER_DESC
  DELIVERY_NOTE_NR_ASC
  DELIVERY_NOTE_NR_DESC
  DELIVERY_DATE_ASC
  DELIVERY_DATE_DESC
}

type Document {
  id: UUID
  type: DocumentType
  categoryId: UUID
  workflowStepId: UUID
  importedBy: UUID
  importedAt: Datetime
  periodDate: Datetime
  name: String
  title: String
  language: LanguageCode
  version: Datetime
  numPages: Int
  numAttachPages: Int
}

"""
A condition to be used against `Document` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DocumentCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `type` field."""
  type: DocumentType

  """Checks for equality with the object’s `categoryId` field."""
  categoryId: UUID

  """Checks for equality with the object’s `workflowStepId` field."""
  workflowStepId: UUID

  """Checks for equality with the object’s `importedBy` field."""
  importedBy: UUID

  """Checks for equality with the object’s `importedAt` field."""
  importedAt: Datetime

  """Checks for equality with the object’s `periodDate` field."""
  periodDate: Datetime

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `language` field."""
  language: LanguageCode

  """Checks for equality with the object’s `version` field."""
  version: Datetime

  """Checks for equality with the object’s `numPages` field."""
  numPages: Int

  """Checks for equality with the object’s `numAttachPages` field."""
  numAttachPages: Int
}

"""A connection to a list of `Document` values."""
type DocumentsConnection {
  """A list of `Document` objects."""
  nodes: [Document]!

  """
  A list of edges which contains the `Document` and cursor to aid in pagination.
  """
  edges: [DocumentsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Document` you could get from the connection."""
  totalCount: Int
}

"""A `Document` edge in the connection."""
type DocumentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Document` at the end of the edge."""
  node: Document
}

"""Methods to use when ordering `Document`."""
enum DocumentsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TYPE_ASC
  TYPE_DESC
  CATEGORY_ID_ASC
  CATEGORY_ID_DESC
  WORKFLOW_STEP_ID_ASC
  WORKFLOW_STEP_ID_DESC
  IMPORTED_BY_ASC
  IMPORTED_BY_DESC
  IMPORTED_AT_ASC
  IMPORTED_AT_DESC
  PERIOD_DATE_ASC
  PERIOD_DATE_DESC
  NAME_ASC
  NAME_DESC
  TITLE_ASC
  TITLE_DESC
  LANGUAGE_ASC
  LANGUAGE_DESC
  VERSION_ASC
  VERSION_DESC
  NUM_PAGES_ASC
  NUM_PAGES_DESC
  NUM_ATTACH_PAGES_ASC
  NUM_ATTACH_PAGES_DESC
}

"""Document type"""
enum DocumentType {
  INCOMING_INVOICE
  OUTGOING_INVOICE
  INCOMING_DUNNING_LETTER
  OUTGOING_DUNNING_LETTER
  INCOMING_DELIVERY_NOTE
  OUTGOING_DELIVERY_NOTE
  BANK_STATEMENT
  CREDITCARD_STATEMENT
  FACTORING_STATEMENT
  OTHER_DOCUMENT
}

type Invoice {
  documentId: UUID
  type: DocumentType
  categoryId: UUID
  workflowStepId: UUID
  importDate: Datetime
  periodDate: Datetime
  name: String
  title: String
  language: LanguageCode
  version: Datetime
  numPages: Int
  numAttachPages: Int
  abacusVerified: Boolean
  unresolvedIssues: Boolean
  unresolvedIssuesDesc: [String]
  accountantLockBy: String
  accountantLockAt: Datetime
  bookedBy: String
  bookedAt: Datetime
  partnerName: String
  invoiceNumber: String
  invoiceNumberConfirmedBy: String
  invoiceNumberConfirmedAt: Datetime
  invoiceDate: Date
  invoiceDateConfirmedBy: String
  invoiceDateConfirmedAt: Datetime
  net: Float
  netConfirmedBy: String
  netConfirmedAt: Datetime
  total: Float
  totalConfirmedBy: String
  totalConfirmedAt: Datetime
  vatPercent: Float
  vatPercentConfirmedBy: String
  vatPercentConfirmedAt: Datetime
  vatId: String
  vatIdConfirmedBy: String
  vatIdConfirmedAt: Datetime
  discountPercent: Float
  discountPercentConfirmedBy: String
  discountPercentConfirmedAt: Datetime
  discountUntil: Date
  discountUntilConfirmedBy: String
  discountUntilConfirmedAt: Datetime
  currency: CurrencyCode
  currencyConfirmedBy: String
  currencyConfirmedAt: Datetime
  currencyInEur: Float
  goodsServices: String
  goodsServicesConfirmedBy: String
  goodsServicesConfirmedAt: Datetime
  deliveredFrom: Date
  deliveredFromConfirmedBy: String
  deliveredFromConfirmedAt: Datetime
  deliveredUntil: Date
  deliveredUntilConfirmedBy: String
  deliveredUntilConfirmedAt: Datetime
  iban: BankIban
  ibanConfirmedBy: String
  ibanConfirmedAt: Datetime
  ibanCandidates: [String]
  bic: BankBic
  bicConfirmedBy: String
  bicConfirmedAt: Datetime
  bicCandidates: [String]
  dueDate: Date
  dueDateConfirmedBy: String
  dueDateConfirmedAt: Datetime
  paymentStatus: InvoicePaymentStatus
  paymentStatusConfirmedBy: String
  paymentStatusConfirmedAt: Datetime
  paidDate: Date
  paidDateConfirmedBy: String
  paidDateConfirmedAt: Datetime
}

"""
A condition to be used against `Invoice` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input InvoiceCondition {
  """Checks for equality with the object’s `documentId` field."""
  documentId: UUID

  """Checks for equality with the object’s `type` field."""
  type: DocumentType

  """Checks for equality with the object’s `categoryId` field."""
  categoryId: UUID

  """Checks for equality with the object’s `workflowStepId` field."""
  workflowStepId: UUID

  """Checks for equality with the object’s `importDate` field."""
  importDate: Datetime

  """Checks for equality with the object’s `periodDate` field."""
  periodDate: Datetime

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `language` field."""
  language: LanguageCode

  """Checks for equality with the object’s `version` field."""
  version: Datetime

  """Checks for equality with the object’s `numPages` field."""
  numPages: Int

  """Checks for equality with the object’s `numAttachPages` field."""
  numAttachPages: Int

  """Checks for equality with the object’s `abacusVerified` field."""
  abacusVerified: Boolean

  """Checks for equality with the object’s `unresolvedIssues` field."""
  unresolvedIssues: Boolean

  """Checks for equality with the object’s `unresolvedIssuesDesc` field."""
  unresolvedIssuesDesc: [String]

  """Checks for equality with the object’s `accountantLockBy` field."""
  accountantLockBy: String

  """Checks for equality with the object’s `accountantLockAt` field."""
  accountantLockAt: Datetime

  """Checks for equality with the object’s `bookedBy` field."""
  bookedBy: String

  """Checks for equality with the object’s `bookedAt` field."""
  bookedAt: Datetime

  """Checks for equality with the object’s `partnerName` field."""
  partnerName: String

  """Checks for equality with the object’s `invoiceNumber` field."""
  invoiceNumber: String

  """
  Checks for equality with the object’s `invoiceNumberConfirmedBy` field.
  """
  invoiceNumberConfirmedBy: String

  """
  Checks for equality with the object’s `invoiceNumberConfirmedAt` field.
  """
  invoiceNumberConfirmedAt: Datetime

  """Checks for equality with the object’s `invoiceDate` field."""
  invoiceDate: Date

  """Checks for equality with the object’s `invoiceDateConfirmedBy` field."""
  invoiceDateConfirmedBy: String

  """Checks for equality with the object’s `invoiceDateConfirmedAt` field."""
  invoiceDateConfirmedAt: Datetime

  """Checks for equality with the object’s `net` field."""
  net: Float

  """Checks for equality with the object’s `netConfirmedBy` field."""
  netConfirmedBy: String

  """Checks for equality with the object’s `netConfirmedAt` field."""
  netConfirmedAt: Datetime

  """Checks for equality with the object’s `total` field."""
  total: Float

  """Checks for equality with the object’s `totalConfirmedBy` field."""
  totalConfirmedBy: String

  """Checks for equality with the object’s `totalConfirmedAt` field."""
  totalConfirmedAt: Datetime

  """Checks for equality with the object’s `vatPercent` field."""
  vatPercent: Float

  """Checks for equality with the object’s `vatPercentConfirmedBy` field."""
  vatPercentConfirmedBy: String

  """Checks for equality with the object’s `vatPercentConfirmedAt` field."""
  vatPercentConfirmedAt: Datetime

  """Checks for equality with the object’s `vatId` field."""
  vatId: String

  """Checks for equality with the object’s `vatIdConfirmedBy` field."""
  vatIdConfirmedBy: String

  """Checks for equality with the object’s `vatIdConfirmedAt` field."""
  vatIdConfirmedAt: Datetime

  """Checks for equality with the object’s `discountPercent` field."""
  discountPercent: Float

  """
  Checks for equality with the object’s `discountPercentConfirmedBy` field.
  """
  discountPercentConfirmedBy: String

  """
  Checks for equality with the object’s `discountPercentConfirmedAt` field.
  """
  discountPercentConfirmedAt: Datetime

  """Checks for equality with the object’s `discountUntil` field."""
  discountUntil: Date

  """
  Checks for equality with the object’s `discountUntilConfirmedBy` field.
  """
  discountUntilConfirmedBy: String

  """
  Checks for equality with the object’s `discountUntilConfirmedAt` field.
  """
  discountUntilConfirmedAt: Datetime

  """Checks for equality with the object’s `currency` field."""
  currency: CurrencyCode

  """Checks for equality with the object’s `currencyConfirmedBy` field."""
  currencyConfirmedBy: String

  """Checks for equality with the object’s `currencyConfirmedAt` field."""
  currencyConfirmedAt: Datetime

  """Checks for equality with the object’s `currencyInEur` field."""
  currencyInEur: Float

  """Checks for equality with the object’s `goodsServices` field."""
  goodsServices: String

  """
  Checks for equality with the object’s `goodsServicesConfirmedBy` field.
  """
  goodsServicesConfirmedBy: String

  """
  Checks for equality with the object’s `goodsServicesConfirmedAt` field.
  """
  goodsServicesConfirmedAt: Datetime

  """Checks for equality with the object’s `deliveredFrom` field."""
  deliveredFrom: Date

  """
  Checks for equality with the object’s `deliveredFromConfirmedBy` field.
  """
  deliveredFromConfirmedBy: String

  """
  Checks for equality with the object’s `deliveredFromConfirmedAt` field.
  """
  deliveredFromConfirmedAt: Datetime

  """Checks for equality with the object’s `deliveredUntil` field."""
  deliveredUntil: Date

  """
  Checks for equality with the object’s `deliveredUntilConfirmedBy` field.
  """
  deliveredUntilConfirmedBy: String

  """
  Checks for equality with the object’s `deliveredUntilConfirmedAt` field.
  """
  deliveredUntilConfirmedAt: Datetime

  """Checks for equality with the object’s `iban` field."""
  iban: BankIban

  """Checks for equality with the object’s `ibanConfirmedBy` field."""
  ibanConfirmedBy: String

  """Checks for equality with the object’s `ibanConfirmedAt` field."""
  ibanConfirmedAt: Datetime

  """Checks for equality with the object’s `ibanCandidates` field."""
  ibanCandidates: [String]

  """Checks for equality with the object’s `bic` field."""
  bic: BankBic

  """Checks for equality with the object’s `bicConfirmedBy` field."""
  bicConfirmedBy: String

  """Checks for equality with the object’s `bicConfirmedAt` field."""
  bicConfirmedAt: Datetime

  """Checks for equality with the object’s `bicCandidates` field."""
  bicCandidates: [String]

  """Checks for equality with the object’s `dueDate` field."""
  dueDate: Date

  """Checks for equality with the object’s `dueDateConfirmedBy` field."""
  dueDateConfirmedBy: String

  """Checks for equality with the object’s `dueDateConfirmedAt` field."""
  dueDateConfirmedAt: Datetime

  """Checks for equality with the object’s `paymentStatus` field."""
  paymentStatus: InvoicePaymentStatus

  """
  Checks for equality with the object’s `paymentStatusConfirmedBy` field.
  """
  paymentStatusConfirmedBy: String

  """
  Checks for equality with the object’s `paymentStatusConfirmedAt` field.
  """
  paymentStatusConfirmedAt: Datetime

  """Checks for equality with the object’s `paidDate` field."""
  paidDate: Date

  """Checks for equality with the object’s `paidDateConfirmedBy` field."""
  paidDateConfirmedBy: String

  """Checks for equality with the object’s `paidDateConfirmedAt` field."""
  paidDateConfirmedAt: Datetime
}

enum InvoicePaymentStatus {
  NOT_PAYABLE
  CREDITCARD
  CASH
}

"""A connection to a list of `Invoice` values."""
type InvoicesConnection {
  """A list of `Invoice` objects."""
  nodes: [Invoice]!

  """
  A list of edges which contains the `Invoice` and cursor to aid in pagination.
  """
  edges: [InvoicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Invoice` you could get from the connection."""
  totalCount: Int
}

"""A `Invoice` edge in the connection."""
type InvoicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Invoice` at the end of the edge."""
  node: Invoice
}

"""Methods to use when ordering `Invoice`."""
enum InvoicesOrderBy {
  NATURAL
  DOCUMENT_ID_ASC
  DOCUMENT_ID_DESC
  TYPE_ASC
  TYPE_DESC
  CATEGORY_ID_ASC
  CATEGORY_ID_DESC
  WORKFLOW_STEP_ID_ASC
  WORKFLOW_STEP_ID_DESC
  IMPORT_DATE_ASC
  IMPORT_DATE_DESC
  PERIOD_DATE_ASC
  PERIOD_DATE_DESC
  NAME_ASC
  NAME_DESC
  TITLE_ASC
  TITLE_DESC
  LANGUAGE_ASC
  LANGUAGE_DESC
  VERSION_ASC
  VERSION_DESC
  NUM_PAGES_ASC
  NUM_PAGES_DESC
  NUM_ATTACH_PAGES_ASC
  NUM_ATTACH_PAGES_DESC
  ABACUS_VERIFIED_ASC
  ABACUS_VERIFIED_DESC
  UNRESOLVED_ISSUES_ASC
  UNRESOLVED_ISSUES_DESC
  UNRESOLVED_ISSUES_DESC_ASC
  UNRESOLVED_ISSUES_DESC_DESC
  ACCOUNTANT_LOCK_BY_ASC
  ACCOUNTANT_LOCK_BY_DESC
  ACCOUNTANT_LOCK_AT_ASC
  ACCOUNTANT_LOCK_AT_DESC
  BOOKED_BY_ASC
  BOOKED_BY_DESC
  BOOKED_AT_ASC
  BOOKED_AT_DESC
  PARTNER_NAME_ASC
  PARTNER_NAME_DESC
  INVOICE_NUMBER_ASC
  INVOICE_NUMBER_DESC
  INVOICE_NUMBER_CONFIRMED_BY_ASC
  INVOICE_NUMBER_CONFIRMED_BY_DESC
  INVOICE_NUMBER_CONFIRMED_AT_ASC
  INVOICE_NUMBER_CONFIRMED_AT_DESC
  INVOICE_DATE_ASC
  INVOICE_DATE_DESC
  INVOICE_DATE_CONFIRMED_BY_ASC
  INVOICE_DATE_CONFIRMED_BY_DESC
  INVOICE_DATE_CONFIRMED_AT_ASC
  INVOICE_DATE_CONFIRMED_AT_DESC
  NET_ASC
  NET_DESC
  NET_CONFIRMED_BY_ASC
  NET_CONFIRMED_BY_DESC
  NET_CONFIRMED_AT_ASC
  NET_CONFIRMED_AT_DESC
  TOTAL_ASC
  TOTAL_DESC
  TOTAL_CONFIRMED_BY_ASC
  TOTAL_CONFIRMED_BY_DESC
  TOTAL_CONFIRMED_AT_ASC
  TOTAL_CONFIRMED_AT_DESC
  VAT_PERCENT_ASC
  VAT_PERCENT_DESC
  VAT_PERCENT_CONFIRMED_BY_ASC
  VAT_PERCENT_CONFIRMED_BY_DESC
  VAT_PERCENT_CONFIRMED_AT_ASC
  VAT_PERCENT_CONFIRMED_AT_DESC
  VAT_ID_ASC
  VAT_ID_DESC
  VAT_ID_CONFIRMED_BY_ASC
  VAT_ID_CONFIRMED_BY_DESC
  VAT_ID_CONFIRMED_AT_ASC
  VAT_ID_CONFIRMED_AT_DESC
  DISCOUNT_PERCENT_ASC
  DISCOUNT_PERCENT_DESC
  DISCOUNT_PERCENT_CONFIRMED_BY_ASC
  DISCOUNT_PERCENT_CONFIRMED_BY_DESC
  DISCOUNT_PERCENT_CONFIRMED_AT_ASC
  DISCOUNT_PERCENT_CONFIRMED_AT_DESC
  DISCOUNT_UNTIL_ASC
  DISCOUNT_UNTIL_DESC
  DISCOUNT_UNTIL_CONFIRMED_BY_ASC
  DISCOUNT_UNTIL_CONFIRMED_BY_DESC
  DISCOUNT_UNTIL_CONFIRMED_AT_ASC
  DISCOUNT_UNTIL_CONFIRMED_AT_DESC
  CURRENCY_ASC
  CURRENCY_DESC
  CURRENCY_CONFIRMED_BY_ASC
  CURRENCY_CONFIRMED_BY_DESC
  CURRENCY_CONFIRMED_AT_ASC
  CURRENCY_CONFIRMED_AT_DESC
  CURRENCY_IN_EUR_ASC
  CURRENCY_IN_EUR_DESC
  GOODS_SERVICES_ASC
  GOODS_SERVICES_DESC
  GOODS_SERVICES_CONFIRMED_BY_ASC
  GOODS_SERVICES_CONFIRMED_BY_DESC
  GOODS_SERVICES_CONFIRMED_AT_ASC
  GOODS_SERVICES_CONFIRMED_AT_DESC
  DELIVERED_FROM_ASC
  DELIVERED_FROM_DESC
  DELIVERED_FROM_CONFIRMED_BY_ASC
  DELIVERED_FROM_CONFIRMED_BY_DESC
  DELIVERED_FROM_CONFIRMED_AT_ASC
  DELIVERED_FROM_CONFIRMED_AT_DESC
  DELIVERED_UNTIL_ASC
  DELIVERED_UNTIL_DESC
  DELIVERED_UNTIL_CONFIRMED_BY_ASC
  DELIVERED_UNTIL_CONFIRMED_BY_DESC
  DELIVERED_UNTIL_CONFIRMED_AT_ASC
  DELIVERED_UNTIL_CONFIRMED_AT_DESC
  IBAN_ASC
  IBAN_DESC
  IBAN_CONFIRMED_BY_ASC
  IBAN_CONFIRMED_BY_DESC
  IBAN_CONFIRMED_AT_ASC
  IBAN_CONFIRMED_AT_DESC
  IBAN_CANDIDATES_ASC
  IBAN_CANDIDATES_DESC
  BIC_ASC
  BIC_DESC
  BIC_CONFIRMED_BY_ASC
  BIC_CONFIRMED_BY_DESC
  BIC_CONFIRMED_AT_ASC
  BIC_CONFIRMED_AT_DESC
  BIC_CANDIDATES_ASC
  BIC_CANDIDATES_DESC
  DUE_DATE_ASC
  DUE_DATE_DESC
  DUE_DATE_CONFIRMED_BY_ASC
  DUE_DATE_CONFIRMED_BY_DESC
  DUE_DATE_CONFIRMED_AT_ASC
  DUE_DATE_CONFIRMED_AT_DESC
  PAYMENT_STATUS_ASC
  PAYMENT_STATUS_DESC
  PAYMENT_STATUS_CONFIRMED_BY_ASC
  PAYMENT_STATUS_CONFIRMED_BY_DESC
  PAYMENT_STATUS_CONFIRMED_AT_ASC
  PAYMENT_STATUS_CONFIRMED_AT_DESC
  PAID_DATE_ASC
  PAID_DATE_DESC
  PAID_DATE_CONFIRMED_BY_ASC
  PAID_DATE_CONFIRMED_BY_DESC
  PAID_DATE_CONFIRMED_AT_ASC
  PAID_DATE_CONFIRMED_AT_DESC
}

"""Two character lower case language code"""
scalar LanguageCode

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `DeliveryNote`."""
  allDeliveryNotes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DeliveryNote`."""
    orderBy: [DeliveryNotesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DeliveryNoteCondition
  ): DeliveryNotesConnection

  """Reads and enables pagination through a set of `DeliveryNoteItem`."""
  allDeliveryNoteItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DeliveryNoteItem`."""
    orderBy: [DeliveryNoteItemsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DeliveryNoteItemCondition
  ): DeliveryNoteItemsConnection

  """Reads and enables pagination through a set of `Document`."""
  allDocuments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Document`."""
    orderBy: [DocumentsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DocumentCondition
  ): DocumentsConnection

  """Reads and enables pagination through a set of `Invoice`."""
  allInvoices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Invoice`."""
    orderBy: [InvoicesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InvoiceCondition
  ): InvoicesConnection
  deliveryNoteByDocumentId(id: UUID): DeliveryNote
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID
